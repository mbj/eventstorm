###############################################################################
# Default lighttpd.conf for Gentoo.
# $Header: /var/cvsroot/gentoo-x86/www-servers/lighttpd/files/conf/lighttpd.conf,v 1.3 2005/09/01 14:22:35 ka0ttic Exp $
###############################################################################

# listen to ipv4 and ipv6
server.bind = "188.165.255.129"
server.port = "7654"
$SERVER["socket"] == "[2001:41d0:2:ca81::1]:7654" {  }

# {{{ variables
var.basedir  = "/export/home/gibheer/project/eventstorm/clients/lighttpd"
var.logdir   = "/var/log/lighttpd"
var.statedir = "/usr/local/lib/lighttpd"
# }}}

# {{{ modules
# At the very least, mod_access and mod_accesslog should be enabled.
# All other modules should only be loaded if necessary.
# NOTE: the order of modules is important.
server.modules = (
    "mod_rewrite",
    "mod_redirect",
#    "mod_alias",
    "mod_access",
#    "mod_cml",
#    "mod_trigger_b4_dl",
#    "mod_auth",
#    "mod_status",
#    "mod_setenv",
    "mod_proxy",
    "mod_simple_vhost",
#    "mod_evhost",
#    "mod_userdir",
    "mod_compress",
#    "mod_ssi",
#    "mod_usertrack",
#    "mod_expire",
#    "mod_secdownload",
#    "mod_rrdtool",
#    "mod_webdav",
    "mod_accesslog"
)
# }}}

# {{{ includes
#include "mime-types.conf"
# uncomment for cgi support
#   include "mod_cgi.conf"
# uncomment for php/fastcgi support
#include "mod_fastcgi.conf"
# }}}

# {{{ server settings
#server.username      = "lighttpd"
#server.groupname     = "lighttpd"
server.username = "gibheer"
server.groupname = "gibheer"

server.document-root = var.basedir + "/htdocs"
server.pid-file      = "/tmp/lighttpd.pid"

server.errorlog      = "/tmp/error.log"
# log errors to syslog instead
#   server.errorlog-use-syslog = "enable"

server.indexfiles    = ("index.html", "index.xhtml",
					"index.xml", "index.htm", "default.htm")

# server.tag           = "lighttpd"

server.follow-symlink = "enable"

# event handler (defaults to "poll")
# see performance.txt
# 
# for >= linux-2.4
#   server.event-handler = "linux-rtsig"
# for >= linux-2.6
#   server.event-handler = "linux-sysepoll"
# for FreeBSD
#   server.event-handler = "freebsd-kqueue"

# chroot to directory (defaults to no chroot)
# server.chroot      = "/"

# bind to port (defaults to 80)
# server.port          = 81

# bind to name (defaults to all interfaces)
# server.bind          = "grisu.home.kneschke.de"

# error-handler for status 404
# server.error-handler-404 = "/error-handler.html"
# server.error-handler-404 = "/error-handler.php"

# Format: <errorfile-prefix><status-code>.html
# -> ..../status-404.html for 'File not found'
# server.errorfile-prefix    = var.basedir + "/error/status-"

# FAM support for caching stat() calls
# requires that lighttpd be built with USE=fam
#   server.stat-cache-engine = "fam"
# }}}

# {{{ mod_staticfile

# which extensions should not be handled via static-file transfer
# (extensions that are usually handled by mod_cgi, mod_fastcgi, etc).
static-file.exclude-extensions = (".php", ".pl", ".cgi", ".fcgi")
# }}}

# {{{ mod_accesslog
accesslog.filename   = "|rake client:lighttpd"
# log format for csv
# %h host ip
# %t timestamp of the end of the request
# %m request method
# %s status code
# %b bytes sent
# %U request URL
# %f real filename
# %q query string
# %T time used in secounds
accesslog.format = "%h|%t|%m|%s|%b|%U|%f|%q|%T|%{User-Agent}i|%{Referer}i"
# }}}

# {{{ mod_dirlisting
# enable directory listings
#   dir-listing.activate      = "enable"
#
# don't list hidden files/directories
#   dir-listing.hide-dotfiles = "enable"
#
# use a different css for directory listings
#   dir-listing.external-css  = "/path/to/dir-listing.css"
#
# list of regular expressions.  files that match any of the
# specified regular expressions will be excluded from directory
# listings.
#   dir-listing.exclude = ("^\.", "~$")
# }}}

# {{{ mod_access
# see access.txt

url.access-deny = ("~", ".inc")
# }}}

# {{{ mod_userdir
# see userdir.txt
#
# userdir.path = "public_html"
# userdir.exclude-user = ("root")
# }}}

# {{{ mod_ssi
# see ssi.txt
#
# ssi.extension = (".shtml")
# }}}

# {{{ mod_ssl
# see ssl.txt
#
# ssl.engine    = "enable"
# ssl.pemfile   = "server.pem"
# }}}
#$SERVER["socket"] == ":443" {
#  ssl.engine = "enable"
#  ssl.pemfile = "/usr/local/etc/lighttpd.pem"
#}
# {{{ mod_status
# see status.txt
#
# status.status-url  = "/server-status"
# status.config-url  = "/server-config"
# }}}

# {{{ mod_simple_vhost
# see simple-vhost.txt
#
#  If you want name-based virtual hosting add the next three settings and load
#  mod_simple_vhost
#
# document-root =
#   virtual-server-root + virtual-server-default-host + virtual-server-docroot
# or
#   virtual-server-root + http-host + virtual-server-docroot
#
#$SERVER["socket"] == ":443" {
#  ssl.engine = "enable"
#  ssl.pemfile = "/usr/local/etc/lighttpd/zero-knowledge.pem"
#  ssl.ca-file = "/usr/local/etc/lighttpd/ca-certs.pem"
#}
simple-vhost.server-root   = "/export/www/"
# simple-vhost.default-host  = "grisu.home.kneschke.de"

$HTTP["host"] =~ "(^|\.)zero-knowledge.org$" {
  $HTTP["host"] =~ "(^|www\.)zero-knowledge.org$" {
    proxy.server = ("" => ("zero-knowledge.org" => ("host" => "127.0.0.1", "port" => "4503")))
  }
  $HTTP["host"] =~ "umzug.zero-knowledge.org" {
    proxy.server = ("" => ("umzug.zero-knowledge.org" => ("host" => "127.0.0.1", "port" => "4502")))
  }
 	simple-vhost.default-host = "zero-knowledge.org"
#  ssl.pemfile = "/usr/local/etc/lighttpd/zero-knowledge.pem"
}
$HTTP["host"] =~ "(^|\.)stormwinds-page.de$" {
 	simple-vhost.default-host = "stormwinds-page.de"
}
$HTTP["host"] =~ "(^|\.)quantenteilchen.de$" {
	simple-vhost.default-host = "quantenteilchen.de"
}
$HTTP["host"] =~ "(^|\.)quantenteich.org" {
  $HTTP["host"] =~ "(^|\.)redmine.quantenteich.org" {
     proxy.server = ("" => ("redmine.quantenteich.org" => ("host" => "127.0.0.1", "port" => "4501")))
  }
  $HTTP["host"] =~ "gibheer.dev.quantenteich.org" {
    proxy.server = ("" => ("gibheer.dev.quantenteich.org" => ("host" => "127.0.0.1", "port" => "16001")))
  }
  $HTTP["host"] =~ "stormwind.dev.quantenteich.org" {
    proxy.server = ("" => ("stormwind.dev.quantenteich.org" => ("host" => "127.0.0.1", "port" => "16002")))
  }
  $HTTP["host"] =~ "noskro.dev.quantenteich.org" {
    proxy.server = ("" => ("noskro.dev.quantenteich.org" => ("host" => "127.0.0.1", "port" => "16003")))
  }
#  ssl.pemfile = "/usr/local/etc/lighttpd/quantenteich.pem"
	simple-vhost.default-host = "quantenteich.org"
}
$HTTP["host"] =~ "(^|\.)blubotter.org" {
	simple-vhost.default-host = "blubotter.org"
}
$HTTP["host"] =~ "(^|\.)caterwauling.org" {
  proxy.server = ("" => ("caterwauling.org" => ("host" => "127.0.0.1", "port" => "4500")))
#  simple-vhost.default-host = "caterwauling.org"
}
# $HTTP["host"] == "ruby.zero-knowledge.org" {
# 	fastcgi.server = (
#		".rb" =>
#		( "*" => (
#				"socket" => "/var/run/lighttpd/ruby-fcgi" + PID + ".socket",
#				"bin-path" => "/var/www/ruby.zero-knowledge.org/htdocs/main.rb"
#			)
#		)
#	)
#}
 simple-vhost.document-root = "htdocs/"
# }}}

# {{{ mod_compress
# see compress.txt
#
# compress.cache-dir   = var.statedir + "/cache/compress"
 compress.filetype    = ("text/plain", "text/html", "text/css", "image/png", "image/gif", "text/javascript")
# }}}

# {{{ mod_proxy
# see proxy.txt
#
# proxy.server               = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "host" => "192.168.0.101",
#                                   "port" => 80
#                                 )
#                               )
#                             )
# }}}

# {{{ mod_auth
# see authentication.txt
#
# auth.backend               = "plain"
# auth.backend.plain.userfile = "lighttpd.user"
# auth.backend.plain.groupfile = "lighttpd.group"

# auth.backend.ldap.hostname = "localhost"
# auth.backend.ldap.base-dn  = "dc=my-domain,dc=com"
# auth.backend.ldap.filter   = "(uid=$)"

# auth.require               = ( "/server-status" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "user=jan"
#                               ),
#                               "/server-info" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "valid-user"
#                               )
#                             )
# }}}

# {{{ mod_rewrite
# see rewrite.txt
#
# url.rewrite = (
#	"^/$"		=>		"/server-status"
# )
# }}}

# {{{ mod_redirect
# see redirect.txt
#
# url.redirect = (
#	"^/wishlist/(.+)"		=>		"http://www.123.org/$1"
# )
# }}}

# {{{ mod_evhost
# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
# evhost.path-pattern        = "/var/www/%3%0/htdocs/"
# }}}

# {{{ mod_expire
# expire.url = (
#	"/buggy/"		=>		"access 2 hours",
#	"/asdhas/"		=>		"access plus 1 seconds 2 minutes"
# )
# }}}

# {{{ mod_rrdtool
# see rrdtool.txt
#
# rrdtool.binary  = "/usr/bin/rrdtool"
# rrdtool.db-name = var.statedir + "/lighttpd.rrd"
# }}}

# {{{ mod_setenv
# see setenv.txt
#
# setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
# setenv.add-response-header = ( "X-Secret-Message" => "42" )
# }}}

# {{{ mod_trigger_b4_dl
# see trigger_b4_dl.txt
#
# trigger-before-download.gdbm-filename = "/home/weigon/testbase/trigger.db"
# trigger-before-download.memcache-hosts = ( "127.0.0.1:11211" )
# trigger-before-download.trigger-url = "^/trigger/"
# trigger-before-download.download-url = "^/download/"
# trigger-before-download.deny-url = "http://127.0.0.1/index.html"
# trigger-before-download.trigger-timeout = 10
# }}}

# {{{ mod_cml
# see cml.txt
#
# don't forget to add index.cml to server.indexfiles
# cml.extension               = ".cml"
# cml.memcache-hosts          = ( "127.0.0.1:11211" )
# }}} 

# {{{ mod_webdav
# see webdav.txt
#
# $HTTP["url"] =~ "^/dav($|/)" {
#     webdav.activate = "enable"
#     webdav.is-readonly = "enable"
# }
# }}}

# {{{ extra rules
#
# set Content-Encoding and reset Content-Type for browsers that
# support decompressing on-thy-fly (requires mod_setenv)
# $HTTP["url"] =~ "\.gz$" {
#     setenv.add-response-header = ("Content-Encoding" => "x-gzip")
#     mimetype.assign = (".gz" => "text/plain")
# }

# $HTTP["url"] =~ "\.bz2$" {
#     setenv.add-response-header = ("Content-Encoding" => "x-bzip2")
#     mimetype.assign = (".bz2" => "text/plain")
# }
#
# }}}

# {{{ debug
# debug.log-request-header   = "enable"
# debug.log-response-header  = "enable"
# debug.log-request-handling = "enable"
# debug.log-file-not-found   = "enable"
# }}}

# {{{ mime types
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".dmg"          =>      "application/x-apple-diskimage",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".h"            =>      "text/plain",
  ".cc"           =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".hh"           =>      "text/plain",
  ".hpp"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".log"          =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".diff"         =>      "text/plain",
  ".patch"        =>      "text/plain",
  ".ebuild"       =>      "text/plain",
  ".eclass"       =>      "text/plain",
  ".rtf"          =>      "application/rtf",
  ".bmp"          =>      "image/bmp",
  ".tif"          =>      "image/tiff",
  ".tiff"         =>      "image/tiff",
  ".ico"          =>      "image/x-icon",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".xhtml"	  =>	  "application/xhtml+xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar"
 )
# }}}
